{"is_source_file": true, "format": "Python", "description": "This file defines a Flask-based REST API blueprint for managing notes, including endpoints for listing, creating, retrieving, updating, and deleting note records. It interacts with a SQLAlchemy ORM model 'Note' and includes request handling, validation, and response formatting.", "external_files": ["../db", "../models"], "external_methods": ["db.session.add", "db.session.commit", "db.session.delete"], "published": ["notes_bp"], "classes": [], "methods": [{"name": "ok(data: Any, status: int = 200)", "description": "Utility function to format successful API responses.", "scope": "", "scopeKind": ""}, {"name": "err(message: str, status: int = 400)", "description": "Utility function to format error API responses.", "scope": "", "scopeKind": ""}, {"name": "Tuple[int,int] parse_pagination()", "description": "Parses limit and offset parameters from the request query string with default and capping.", "scope": "", "scopeKind": ""}, {"name": "Tuple[Optional[Dict[str,Any]],Optional[str]] validate_note_payload(payload: Dict[str, Any], partial: bool = False)", "description": "Validates and normalizes the payload for creating or updating notes, including handling missing fields based on the 'partial' flag.", "scope": "", "scopeKind": ""}, {"name": "list_notes()", "description": "GET endpoint that returns a paginated list of notes, optionally filtered by a search term.", "scope": "", "scopeKind": ""}, {"name": "create_note()", "description": "POST endpoint to create a new note after validating the payload.", "scope": "", "scopeKind": ""}, {"name": "get_note(note_id: int)", "description": "GET endpoint to retrieve a specific note by its ID.", "scope": "", "scopeKind": ""}, {"name": "update_note(note_id: int)", "description": "PUT endpoint to partially or fully update a note identified by its ID.", "scope": "", "scopeKind": ""}, {"name": "delete_note(note_id: int)", "description": "DELETE endpoint to remove a note identified by its ID.", "scope": "", "scopeKind": ""}], "calls": ["Note.query.get", "Note.query", "Note.set_tags", "note.to_dict", "db.session.add", "db.session.commit", "db.session.delete"], "search-terms": ["notes_bp", "validate_note_payload", "list_notes", "get_note", "create_note", "update_note", "delete_note", "notes.py", "Note", "flask", "SQLAlchemy"], "state": 2, "file_id": 9, "knowledge_revision": 19, "git_revision": "", "ctags": [{"_type": "tag", "name": "create_note", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def create_note():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "delete_note", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def delete_note(note_id: int):$/", "language": "Python", "kind": "function", "signature": "(note_id: int)"}, {"_type": "tag", "name": "err", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def err(message: str, status: int = 400):$/", "language": "Python", "kind": "function", "signature": "(message: str, status: int = 400)"}, {"_type": "tag", "name": "get_note", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def get_note(note_id: int):$/", "language": "Python", "kind": "function", "signature": "(note_id: int)"}, {"_type": "tag", "name": "list_notes", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def list_notes():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "notes_bp", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^notes_bp = Blueprint(\"notes\", __name__, url_prefix=\"\\/notes\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "ok", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def ok(data: Any, status: int = 200):$/", "language": "Python", "kind": "function", "signature": "(data: Any, status: int = 200)"}, {"_type": "tag", "name": "parse_pagination", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def parse_pagination() -> Tuple[int, int]:$/", "language": "Python", "typeref": "typename:Tuple[int,int]", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "update_note", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def update_note(note_id: int):$/", "language": "Python", "kind": "function", "signature": "(note_id: int)"}, {"_type": "tag", "name": "validate_note_payload", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def validate_note_payload(payload: Dict[str, Any], partial: bool = False) -> Tuple[Optional[Dict/", "language": "Python", "typeref": "typename:Tuple[Optional[Dict[str,Any]],Optional[str]]", "kind": "function", "signature": "(payload: Dict[str, Any], partial: bool = False)"}], "hash": "61e4051d00467ff3149a02bc9bb870e7", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/app/routes/notes.py", "fields": [{"name": "notes_bp = Blueprint(\"notes\", __name__, url_prefix=\"\\/notes\")", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"19": ""}]}