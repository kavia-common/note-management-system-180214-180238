{"is_source_file": true, "format": "Python", "description": "This file defines Flask route handlers for managing notes in a note-taking web application. It includes endpoints for listing, creating, retrieving, updating, and deleting notes, utilizing SQLAlchemy models and request parsing/validation functions.", "external_files": ["../db", "../models"], "external_methods": ["db.session.add", "db.session.commit", "db.session.delete", "Note.query", "Note.query.get", "Note.set_tags", "Note.to_dict"], "published": ["notes_bp", "list_notes", "create_note", "get_note", "update_note", "delete_note"], "classes": [{"name": "Blueprint", "description": "Flask Blueprint object used to group routes related to notes."}, {"name": "Note", "description": "SQLAlchemy model representing a note entity in the database."}], "methods": [{"name": "ok(data: Any, status: int = 200)", "description": "Utility to format successful JSON responses with data and HTTP status.", "scope": "", "scopeKind": ""}, {"name": "err(message: str, status: int = 400)", "description": "Utility to format error JSON responses with message and HTTP status.", "scope": "", "scopeKind": ""}, {"name": "Tuple[int,int] parse_pagination()", "description": "Parses 'limit' and 'offset' query parameters with default and caps.", "scope": "", "scopeKind": ""}, {"name": "Tuple[Optional[Dict[str,Any]],Optional[str]] validate_note_payload(payload: Dict[str, Any], partial: bool = False)", "description": "Validates and normalizes input payload for creating or updating notes.", "scope": "", "scopeKind": ""}, {"name": "list_notes()", "description": "GET endpoint to list notes with optional search, limit, and offset parameters.", "scope": "", "scopeKind": ""}, {"name": "create_note()", "description": "POST endpoint to create a new note.", "scope": "", "scopeKind": ""}, {"name": "get_note(note_id: int)", "description": "GET endpoint to retrieve a note by ID.", "scope": "", "scopeKind": ""}, {"name": "update_note(note_id: int)", "description": "PUT endpoint to update an existing note by ID.", "scope": "", "scopeKind": ""}, {"name": "delete_note(note_id: int)", "description": "DELETE endpoint to remove a note by ID.", "scope": "", "scopeKind": ""}], "calls": ["request.args.get", "request.get_json", "Note.query.get", "Note.query", "db.session.add", "db.session.commit", "db.session.delete"], "search-terms": ["notes_endpoints", "note_management", "REST_API_notes", "Flask_note_routes", "SQLAlchemy_Note_model", "pagination", "Note CRUD operations"], "state": 2, "file_id": 9, "knowledge_revision": 28, "git_revision": "af3b502c3322a0c04a78b006c76b9ef6d59dc996", "revision_history": [{"19": ""}, {"28": "af3b502c3322a0c04a78b006c76b9ef6d59dc996"}], "ctags": [{"_type": "tag", "name": "create_note", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def create_note():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "delete_note", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def delete_note(note_id: int):$/", "language": "Python", "kind": "function", "signature": "(note_id: int)"}, {"_type": "tag", "name": "err", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def err(message: str, status: int = 400):$/", "language": "Python", "kind": "function", "signature": "(message: str, status: int = 400)"}, {"_type": "tag", "name": "get_note", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def get_note(note_id: int):$/", "language": "Python", "kind": "function", "signature": "(note_id: int)"}, {"_type": "tag", "name": "list_notes", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def list_notes():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "notes_bp", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^notes_bp = Blueprint(\"notes\", __name__, url_prefix=\"\\/notes\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "ok", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def ok(data: Any, status: int = 200):$/", "language": "Python", "kind": "function", "signature": "(data: Any, status: int = 200)"}, {"_type": "tag", "name": "parse_pagination", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def parse_pagination() -> Tuple[int, int]:$/", "language": "Python", "typeref": "typename:Tuple[int,int]", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "update_note", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def update_note(note_id: int):$/", "language": "Python", "kind": "function", "signature": "(note_id: int)"}, {"_type": "tag", "name": "validate_note_payload", "path": "/home/kavia/workspace/code-generation/note-management-system-180214-180238/notes_backend/app/routes/notes.py", "pattern": "/^def validate_note_payload(payload: Dict[str, Any], partial: bool = False) -> Tuple[Optional[Dict/", "language": "Python", "typeref": "typename:Tuple[Optional[Dict[str,Any]],Optional[str]]", "kind": "function", "signature": "(payload: Dict[str, Any], partial: bool = False)"}], "hash": "edf1bf1e1976401fb751af0441f64aeb", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/app/routes/notes.py", "fields": [{"name": "notes_bp = Blueprint(\"notes\", __name__, url_prefix=\"\\/notes\")", "scope": "", "scopeKind": "", "description": "unavailable"}]}